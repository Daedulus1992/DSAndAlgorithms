A linked list is a data structure used for storing collections of data. A linked list has following properties.
* Successive elements are connected by pointers.
* The last element points to NULL.
* Can grow and shrink in size during execution of program.
* Can be made just as long as required (until systems memory exhausts).
* Does not waste memory space (but takes some extra memory for pointers). It allocates memory as list grows

Main Linked Lists Operations:
* Insert: inserts an element into the list.
* Delete: removes and returns the specified position element from the list.

Auxiliary Linked Lists Operations:
* Delete List: removes all elements of the list (disposes the list)
* Count: returns the number of elements in the list
* Find nth node from the end of the list.

Above operations make the Linked list ADT.

Arrays Overview
One memory block is allocated for the entire array to hold the elements of the array. The array elements can be accessed
in constant time by using the index of the particular element as the subscript. To access an array element, the address
of an element is computed as an offset from the base address of the array and one multiplication is needed to compute
what is supposed to be added to the base address to get the memory address of the element. First the size of an element
of that data type is calculated and then it is multiplied with the index of the element to get the value to be added to
the base address.

Advantages of Arrays
* Simple and easy to use.
* Faster access to the elements (constant access)

Disadvantages of Arrays
* Preallocates all needed memory up front and wasted memory space for indices in the array that are empty.
* Fixed size: The size of the array is static (specify the array size before using it).
* One block allocation: To allocate the array itself at the beginning, sometimes it may not be possible to get the
memory for the complete array.
* Complex position-based insertion: To insert an element at a given position, we may need to shift the existing
elements. This will create a position for us to insert the new element at the desired position. If the position at which
we want to add an element is at the beginning, then the shifting operation is more expensive.

Dynamic Arrays
Dynamic array (also called as growable array, resizable array, dynamic table, or array list) is a random access,
variable-size list data structure that allows elements to be added or removed. One simple way of implementing dynamic
arrays is to initially start with some fixed size array. As soon as that array becomes full, create the new array double
the size of the original array. Similarly, reduce the array size to half if the elements in the array are less than half.